# ==================================================================================================
# PROJECT WORKFLOW: PHASE 3 - FEATURE DEVELOPMENT
# ==================================================================================================
context:
  project_name: "Biobank Graph Webkit Dep Visualization Platform"
  version: "1.0.0"
  change_history:
    - version: "1.0.0"
      date: "2025-04-15"
      author: "yaml-architect"
      description: "Initial creation of feature development workflow"
  owner: "Project Orchestrator (project-orchestrator)"
  responsible_parties:
    - "spec-writer"
    - "red-phase-engineer"
    - "green-phase-engineer"
    - "refactor-specialist"
    - "feature-developer"
    - "ui-ux-specialist"
    - "documentation-scribe"
    - "git-gatekeeper"
  business_value: >
    Delivers user-facing and research features with full TDD rigor, ensuring correctness, maintainability, and traceability for all business requirements.
  scope: >
    Feature-by-feature implementation for user registration, research survey, and Graph Webkit Dep visualization/manipulation, using strict TDD, code review, and documentation protocols.
  boundaries: >
    Excludes infrastructure, core config, and non-feature code. All features must be implemented via the TDD cycle and documented.
  relationships:
    - "Builds on core infrastructure and config"
    - "Feeds into testing, deployment, and documentation phases"
  assumptions:
    - "All features are decomposed into atomic, testable units"
    - "No code is merged without passing tests and review"
  permissions_required:
    - "Access to feature code, test suites, and docs"
  expected_frequency: "Per feature or bugfix"
  security_and_compliance:
    - "All features must enforce API key auth and data validation"
    - "No sensitive data in codebase"
  related_docs:
    - "docs/api-documentation/"
    - "docs/component-module-documentation/"
    - "docs/feature-specifications/"
  resource_requirements:
    - "Docker Compose running"
    - "Node.js in containers"
    - "Access to config/"
  glossary:
    feature: "A discrete, user- or business-facing capability"
    TDD: "Test-Driven Development"
    Gherkin: "BDD scenario language"
    Red Phase: "Write failing tests"
    Green Phase: "Write minimal code to pass tests"
    Refactor Phase: "Improve code while keeping tests green"
  traceability_matrix:
    - requirement: "User registration"
      steps: ["FEAT-001"]
    - requirement: "Research survey"
      steps: ["FEAT-002"]
    - requirement: "Graph Webkit Dep visualization/manipulation"
      steps: ["FEAT-003"]

steps:
  # ---------------------- FEATURE: USER REGISTRATION ----------------------
  - id: "FEAT-001"
    status_marker: "[ ]"
    name: "Implement User Registration Feature (TDD Cycle)"
    description: >
      Deliver the user registration feature using the full TDD cycle: specification, failing test, minimal implementation, refactor, review, and documentation.
    status: "not_started"
    error_details: ""
    phase: 3
    orchestrator:
      action: "delegate"
      rationale: "Project Orchestrator must ensure all features follow the TDD cycle and are assigned to the correct TDD agent at each phase."
    assigned_to: "spec-writer"
    estimated_time: "2 hours"
    technology_stack:
      primary_language: "TypeScript"
      frameworks: ["Next.js", "NestJS", "GraphQL", "Supabase"]
      tools: ["Jest", "ESLint", "Prettier"]
    prerequisites:
      environment:
        - "Core infrastructure deployed"
        - "Docker Compose running"
      knowledge:
        - "User registration requirements"
        - "TDD workflow"
      resources:
        - "Feature requirements"
        - "Gherkin/BDD docs"
      dependencies:
        - "BACK-002"
        - "DB-002"
    development_approach:
      tdd_required: true
      pair_programming: true
      documentation_update_required: true
    adherence_requirements:
      - "Strict TDD"
      - "No code before test"
      - "Centralized config"
    validation:
      criteria:
        - "All tests pass"
        - "Feature works as specified"
      commands:
        - "docker-compose exec backend yarn test:auth"
        - "docker-compose exec frontend yarn test"
    error_handling:
      potential_errors:
        - error: "Test fails unexpectedly"
          detection: "yarn test returns error"
          resolution: "Fix test or implementation"
        - error: "Feature does not meet spec"
          detection: "Manual/automated review"
          resolution: "Refactor and retest"
    git_operations:
      required: true
      confirmation_required: false
    substeps:
      - id: "FEAT-001.1"
        status_marker: "[ ]"
        name: "Write Gherkin Specification for User Registration"
        description: "Spec Writer creates a .feature file describing user registration scenarios in Gherkin."
        status: "not_started"
        error_details: ""
        phase: 3
        orchestrator:
          action: "delegate"
          rationale: "Spec Writer specializes in BDD scenario creation."
        assigned_to: "spec-writer"
        estimated_time: "20 minutes"
        technology_stack:
          primary_language: "Gherkin"
          frameworks: []
          tools: []
        prerequisites:
          environment:
            - "docs/feature-specifications/ available"
          knowledge:
            - "User registration requirements"
          resources:
            - "Feature requirements"
          dependencies: []
        development_approach:
          tdd_required: true
          pair_programming: false
          documentation_update_required: true
        adherence_requirements:
          - "Clear, testable scenarios"
        validation:
          criteria:
            - ".feature file reviewed and approved"
          commands:
            - "ls docs/feature-specifications/"
        error_handling:
          potential_errors:
            - error: "Ambiguous or incomplete scenarios"
              detection: "Review feedback"
              resolution: "Revise and resubmit"
        git_operations:
          required: true
          confirmation_required: false
        substeps: []

      - id: "FEAT-001.2"
        status_marker: "[ ]"
        name: "Implement Failing Test (Red Phase)"
        description: "Red Phase Engineer writes failing Jest/Vitest tests for user registration based on the Gherkin spec."
        status: "not_started"
        error_details: ""
        phase: 3
        orchestrator:
          action: "delegate"
          rationale: "Red Phase Engineer specializes in writing failing tests."
        assigned_to: "red-phase-engineer"
        estimated_time: "20 minutes"
        technology_stack:
          primary_language: "TypeScript"
          frameworks: ["Jest", "Vitest"]
          tools: []
        prerequisites:
          environment:
            - "Test suite available"
          knowledge:
            - "Test writing"
            - "Gherkin spec"
          resources:
            - "docs/feature-specifications/"
          dependencies:
            - "FEAT-001.1"
        development_approach:
          tdd_required: true
          pair_programming: false
          documentation_update_required: false
        adherence_requirements:
          - "Test must fail for correct reason"
        validation:
          criteria:
            - "Test fails as expected"
          commands:
            - "docker-compose exec backend yarn test:auth"
        error_handling:
          potential_errors:
            - error: "Test passes unexpectedly"
              detection: "yarn test passes"
              resolution: "Check test logic, fix"
        git_operations:
          required: true
          confirmation_required: false
        substeps: []

      - id: "FEAT-001.3"
        status_marker: "[ ]"
        name: "Minimal Implementation (Green Phase)"
        description: "Green Phase Engineer writes the minimal code to make the failing test pass, using templates and config."
        status: "not_started"
        error_details: ""
        phase: 3
        orchestrator:
          action: "delegate"
          rationale: "Green Phase Engineer specializes in minimal implementation."
        assigned_to: "green-phase-engineer"
        estimated_time: "30 minutes"
        technology_stack:
          primary_language: "TypeScript"
          frameworks: ["Next.js", "NestJS"]
          tools: []
        prerequisites:
          environment:
            - "Feature codebase"
          knowledge:
            - "Implementation patterns"
            - "Test requirements"
          resources:
            - "Templates"
            - "Config"
          dependencies:
            - "FEAT-001.2"
        development_approach:
          tdd_required: true
          pair_programming: false
          documentation_update_required: false
        adherence_requirements:
          - "No extra code"
          - "Use templates/config"
        validation:
          criteria:
            - "Test passes"
          commands:
            - "docker-compose exec backend yarn test:auth"
        error_handling:
          potential_errors:
            - error: "Test still fails"
              detection: "yarn test fails"
              resolution: "Fix implementation"
        git_operations:
          required: true
          confirmation_required: false
        substeps: []

      - id: "FEAT-001.4"
        status_marker: "[ ]"
        name: "Refactor and Optimize (Refactor Phase)"
        description: "Refactor Specialist improves code quality, readability, and maintainability while keeping all tests green."
        status: "not_started"
        error_details: ""
        phase: 3
        orchestrator:
          action: "delegate"
          rationale: "Refactor Specialist specializes in code cleanup and optimization."
        assigned_to: "refactor-specialist"
        estimated_time: "20 minutes"
        technology_stack:
          primary_language: "TypeScript"
          frameworks: ["Next.js", "NestJS"]
          tools: ["ESLint", "Prettier"]
        prerequisites:
          environment:
            - "Feature codebase"
          knowledge:
            - "Refactoring best practices"
          resources:
            - "Codebase"
          dependencies:
            - "FEAT-001.3"
        development_approach:
          tdd_required: true
          pair_programming: false
          documentation_update_required: true
        adherence_requirements:
          - "No new features"
          - "All tests remain green"
        validation:
          criteria:
            - "All tests pass"
            - "Code quality checks pass"
          commands:
            - "docker-compose exec backend yarn test:auth"
            - "docker-compose exec backend yarn lint"
        error_handling:
          potential_errors:
            - error: "Tests fail after refactor"
              detection: "yarn test fails"
              resolution: "Undo/refine refactor"
        git_operations:
          required: true
          confirmation_required: false
        substeps: []

      - id: "FEAT-001.5"
        status_marker: "[ ]"
        name: "Code Review and Documentation Update"
        description: "Feature Developer and Documentation Scribe review code, update docs, and prepare for merge."
        status: "not_started"
        error_details: ""
        phase: 3
        orchestrator:
          action: "delegate"
          rationale: "Feature Developer and Documentation Scribe ensure code and docs are ready for merge."
        assigned_to: "feature-developer"
        estimated_time: "20 minutes"
        technology_stack:
          primary_language: "TypeScript"
          frameworks: ["Next.js", "NestJS"]
          tools: ["Markdown"]
        prerequisites:
          environment:
            - "Code and docs available"
          knowledge:
            - "Code review"
            - "Documentation protocols"
          resources:
            - "docs/"
          dependencies:
            - "FEAT-001.4"
        development_approach:
          tdd_required: false
          pair_programming: true
          documentation_update_required: true
        adherence_requirements:
          - "Docs as Living System"
          - "Peer review required"
        validation:
          criteria:
            - "Docs updated"
            - "Review complete"
          commands:
            - "ls docs/"
        error_handling:
          potential_errors:
            - error: "Docs not updated"
              detection: "Review feedback"
              resolution: "Update docs"
        git_operations:
          required: true
          confirmation_required: false
        substeps: []

  # ---------------------- FEATURE: RESEARCH SURVEY ----------------------
  - id: "FEAT-002"
    status_marker: "[ ]"
    name: "Implement Research Survey Feature (TDD Cycle)"
    description: >
      Deliver the research survey feature using the full TDD cycle, following the same atomic steps as user registration.
    status: "not_started"
    error_details: ""
    phase: 3
    orchestrator:
      action: "delegate"
      rationale: "Project Orchestrator must ensure all features follow the TDD cycle and are assigned to the correct TDD agent at each phase."
    assigned_to: "spec-writer"
    estimated_time: "2 hours"
    technology_stack:
      primary_language: "TypeScript"
      frameworks: ["Next.js", "NestJS", "GraphQL", "Supabase"]
      tools: ["Jest", "ESLint", "Prettier"]
    prerequisites:
      environment:
        - "Core infrastructure deployed"
        - "Docker Compose running"
      knowledge:
        - "Research survey requirements"
        - "TDD workflow"
      resources:
        - "Feature requirements"
        - "Gherkin/BDD docs"
      dependencies:
        - "BACK-002"
        - "DB-003"
    development_approach:
      tdd_required: true
      pair_programming: true
      documentation_update_required: true
    adherence_requirements:
      - "Strict TDD"
      - "No code before test"
      - "Centralized config"
    validation:
      criteria:
        - "All tests pass"
        - "Feature works as specified"
      commands:
        - "docker-compose exec backend yarn test:survey"
        - "docker-compose exec frontend yarn test"
    error_handling:
      potential_errors:
        - error: "Test fails unexpectedly"
          detection: "yarn test returns error"
          resolution: "Fix test or implementation"
        - error: "Feature does not meet spec"
          detection: "Manual/automated review"
          resolution: "Refactor and retest"
    git_operations:
      required: true
      confirmation_required: false
    substeps:
      # Substeps FEAT-002.1 to FEAT-002.5: Identical to FEAT-001.1 to FEAT-001.5, but for research survey

  # ---------------------- FEATURE: GRAPH WEBKIT DEP VISUALIZATION ----------------------
  - id: "FEAT-003"
    status_marker: "[ ]"
    name: "Implement Graph Webkit Dep Visualization/Manipulation (TDD Cycle)"
    description: >
      Deliver the Graph Webkit Dep visualization and manipulation feature using the full TDD cycle, including UI, backend, and database integration.
    status: "not_started"
    error_details: ""
    phase: 3
    orchestrator:
      action: "delegate"
      rationale: "Project Orchestrator must ensure all features follow the TDD cycle and are assigned to the correct TDD agent at each phase."
    assigned_to: "spec-writer"
    estimated_time: "3 hours"
    technology_stack:
      primary_language: "TypeScript"
      frameworks: ["Next.js", "NestJS", "GraphQL", "Neo4j", "Apache ECharts"]
      tools: ["Jest", "ESLint", "Prettier"]
    prerequisites:
      environment:
        - "Core infrastructure deployed"
        - "Docker Compose running"
      knowledge:
        - "Graph visualization requirements"
        - "TDD workflow"
      resources:
        - "Feature requirements"
        - "Gherkin/BDD docs"
      dependencies:
        - "BACK-002"
        - "DB-004"
    development_approach:
      tdd_required: true
      pair_programming: true
      documentation_update_required: true
    adherence_requirements:
      - "Strict TDD"
      - "No code before test"
      - "Centralized config"
    validation:
      criteria:
        - "All tests pass"
        - "Feature works as specified"
      commands:
        - "docker-compose exec backend yarn test:graph"
        - "docker-compose exec frontend yarn test"
    error_handling:
      potential_errors:
        - error: "Test fails unexpectedly"
          detection: "yarn test returns error"
          resolution: "Fix test or implementation"
        - error: "Feature does not meet spec"
          detection: "Manual/automated review"
          resolution: "Refactor and retest"
    git_operations:
      required: true
      confirmation_required: false
    substeps:
      # Substeps FEAT-003.1 to FEAT-003.5: Identical to FEAT-001.1 to FEAT-001.5, but for graph visualization/manipulation